/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)
  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123
    - For any other route not defined in the server return 404
  Testing the server - run `npm run test-todoServer` command in terminal
 */
const fs = require("fs").promises;
const express = require("express");
const bodyParser = require("body-parser");
const { v4: uuid } = require("uuid");
const app = express();

app.use(bodyParser.json());

let TODOS = [
  {
    id: uuid(),
    title: "todo1",
    completed: false,
    description: "this is new todo 1",
  },
  {
    id: uuid(),
    title: "todo2",
    completed: false,
    description: "this is new todo 2",
  },
  {
    id: uuid(),
    title: "todo3",
    completed: true,
    description: "this is new todo 3",
  },
];

async function writeToFile(todos) {
  try {
    const res = await fs.writeFile("todos.json", JSON.stringify(todos));
    return res;
  } catch (error) {}
}

async function readFile() {
  try {
    const data = await fs.readFile("todos.json", "utf-8");
    return JSON.parse(data);
  } catch (error) {}
}

// writeToFile();
// readFile();

// fs.writeFile("todos.json", JSON.stringify(TODOS), () => {
//   console.log("done");
// });

// fs.readFile("todos.json", "utf-8", (err, data) => {
//   console.log(JSON.parse(data));
// });

app.get("/todos", async (req, res) => {
  try {
    const todos = await readFile();
    return res.json(todos);
  } catch (error) {
    return res.status(500).json({ error: "something wentr wrong" });
  }
});

app.get("/todos/:id", async (req, res) => {
  const { id } = req.params;
  try {
    const todos = await readFile();
    const todo = todos.find((todo) => todo.id === id);
    if (!todo) {
      return res.status(404).json({ error: "todo not found" });
    }
    return res.json(todo);
  } catch (error) {
    return res.status(500).json({ error: "something wentr wrong" });
  }
});

app.post("/todos", async (req, res) => {
  const { title, completed, description } = req.body;
  try {
    const newTodo = {
      id: uuid(),
      title,
      completed,
      description,
    };
    TODOS.push(newTodo);
    await writeToFile(TODOS);
    return res.status(201).json({ id: newTodo.id });
  } catch (error) {
    return res.status(500).json({ error: "something wentr wrong" });
  }
});

app.put("/todos/:id", async (req, res) => {
  const { id } = req.params;
  const { title, completed } = req.body;
  try {
    const todos = await readFile();
    const todo = todos.find((todo) => todo.id === id);
    if (!todo) {
      return res.status(404).json({ error: "todo not found" });
    }
    TODOS = TODOS.map((todo) =>
      todo.id === id ? { ...todo, title, completed } : todo
    );
    await writeToFile(TODOS);
    return res.json();
  } catch (error) {
    return res.status(500).json({ error: "something wentr wrong" });
  }
});

app.delete("/todos/:id", async (req, res) => {
  const { id } = req.params;
  try {
    const todos = await readFile();
    const todo = todos.find((todo) => todo.id === id);
    if (!todo) {
      return res.status(404).json({ error: "todo not found" });
    }
    TODOS = TODOS.filter((todo) => todo.id !== id);
    await writeToFile(TODOS);
    return res.json();
  } catch (error) {
    return res.status(500).json({ error: "something wentr wrong" });
  }
});

app.get("*", (req, res) => {
  return res.status(404).json({ error: "Route not found" });
});

app.listen(3000, () => {
  console.log("server started!!!");
});
// module.exports = app;
